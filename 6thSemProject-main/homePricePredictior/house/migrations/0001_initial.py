# Generated by Django 4.2.11 on 2025-03-29 16:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='house_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='house_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='HousePricePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.FloatField(help_text='Area in square feet', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('stories', models.FloatField(help_text='Number of floors', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('road_width', models.FloatField(help_text='Width of road in feet', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('city', models.CharField(choices=[('Bhaktapur', 'Bhaktapur'), ('Kathmandu', 'Kathmandu'), ('Lalitpur', 'Lalitpur')], help_text='City location', max_length=20)),
                ('road_type', models.CharField(choices=[('Blacktopped', 'Blacktopped'), ('Gravelled', 'Gravelled'), ('Soil_Stabilized', 'Soil Stabilized')], help_text='Type of road', max_length=20)),
                ('svm_prediction', models.FloatField(blank=True, help_text='Price prediction from SVM model', null=True)),
                ('dt_prediction', models.FloatField(blank=True, help_text='Price prediction from Decision Tree model', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'House Price Prediction',
                'verbose_name_plural': 'House Price Predictions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('feature_scaler', 'Feature Scaler'), ('svm', 'Support Vector Machine'), ('decision_tree', 'Decision Tree'), ('feature_names', 'Feature Names')], max_length=20)),
                ('model_file', models.FileField(upload_to='ml_models/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('city', models.CharField(choices=[('ktm', 'Kathmandu'), ('bkt', 'Bhaktapur'), ('lat', 'Lalitpur')], max_length=100)),
                ('area', models.DecimalField(decimal_places=2, max_digits=10)),
                ('bedrooms', models.IntegerField()),
                ('bathrooms', models.IntegerField()),
                ('stories', models.IntegerField()),
                ('mainroad', models.BooleanField(default=False)),
                ('guestroom', models.BooleanField(default=False)),
                ('basement', models.BooleanField(default=False)),
                ('hotwaterheating', models.BooleanField(default=False)),
                ('airconditioning', models.BooleanField(default=False)),
                ('parking', models.IntegerField(default=0)),
                ('furnishingstatus', models.CharField(choices=[('furnished', 'Furnished'), ('semi_furnished', 'Semi-furnished'), ('unfurnished', 'Unfurnished')], default='unfurnished', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=20)),
                ('property_image', models.ImageField(upload_to='property_images/')),
                ('is_approved', models.BooleanField(default=False)),
                ('decline_reason', models.TextField(blank=True, null=True)),
                ('sale_status', models.CharField(choices=[('available', 'Available'), ('sold', 'Sold')], default='available', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties_for_sale', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='property_images/')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='house.property')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender_name', models.CharField(max_length=255)),
                ('sender_email', models.EmailField(max_length=254)),
                ('content', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='house.property')),
            ],
        ),
    ]
